import pandas as pd
import talib
import mplfinance as mpf
from data_downloader import DataDownloader
from dukascopy_python.instruments import INSTRUMENT_US_PLTR_US_USD
import dukascopy_python
import pprint

# -------------------
# Config
# -------------------
commission = 0.0002       # 0,02%
initial_cash = 100
invest_fraction = 0.3     # percentuale di cash da investire per ogni trade 

# -------------------
# Download dati
# -------------------
DataDownloader.download_data_to_csv(INSTRUMENT_US_PLTR_US_USD, interval=dukascopy_python.INTERVAL_HOUR_1)

df = pd.read_csv(
    "data/PLTR.csv",
    index_col="Gmt time",
    parse_dates=["Gmt time"],
    dayfirst=True
)
df = df[~df.index.isna()]

# -------------------
# Calcolo indicatori
# -------------------
# MACD
macd, macdsignal, macdhist = talib.MACD(df["Close"], fastperiod=12, slowperiod=26, signalperiod=9)
df["MACD_Buy"] = (macd > macdsignal) & (macd.shift(1) <= macdsignal.shift(1))
df["MACD_Sell"] = (macd < macdsignal) & (macd.shift(1) >= macdsignal.shift(1))
df["Portfolio_MACD"] = float("nan")

# RSI
rsi = talib.RSI(df["Close"], timeperiod=14)
df["RSI_Buy"] = rsi < 30
df["RSI_Sell"] = rsi > 70
df["Portfolio_RSI"] = float("nan")

# Bollinger Bands
upper, middle, lower = talib.BBANDS(df["Close"], timeperiod=20, nbdevup=2, nbdevdn=2, matype=0)
df["BB_Buy"] = df["Close"] < lower
df["BB_Sell"] = df["Close"] > upper
df["Portfolio_BB"] = float("nan")

# Engulfing
df["Bullish_Engulfing"] = talib.CDLENGULFING(df["Open"], df["High"], df["Low"], df["Close"]) > 0
df["Bearish_Engulfing"] = talib.CDLENGULFING(df["Open"], df["High"], df["Low"], df["Close"]) < 0
df["Portfolio_Engulfing"] = float("nan")

# -------------------
# Funzione simulazione portafoglio con percentuale investimento
# -------------------
def simulate_portfolio(df, buy_col, sell_col, portfolio_col, invest_fraction=1.0):
    cash = initial_cash
    position = 0
    portfolio = []
    trades = []

    for i in range(len(df)):
        price = df["Close"].iloc[i]
        # Acquisto
        if df[buy_col].iloc[i] and cash > 0:
            amount_to_invest = cash * invest_fraction
            position += amount_to_invest / price * (1 - commission)
            cash -= amount_to_invest
        # Vendita
        elif df[sell_col].iloc[i] and position > 0:
            cash += position * price * (1 - commission)
            trades.append(cash - initial_cash)
            position = 0
        portfolio.append(cash + position * price)
    
    df[portfolio_col] = portfolio

    # Statistiche
    final_portfolio = portfolio[-1]
    roi = (final_portfolio - initial_cash) / initial_cash * 100
    num_trades = len(trades)
    wins = len([t for t in trades if t > 0])
    losses = len([t for t in trades if t <= 0])
    win_rate = wins / num_trades * 100 if num_trades > 0 else 0
    avg_profit = sum(trades) / num_trades if num_trades > 0 else 0
    max_drawdown = ((df[portfolio_col].cummax() - df[portfolio_col]).max())

    return {
        "Final Portfolio": final_portfolio,
        "ROI %": roi,
        "Number of Trades": num_trades,
        "Wins": wins,
        "Losses": losses,
        "Win rate %": win_rate,
        "Average Profit per Trade": avg_profit,
        "Max Drawdown": max_drawdown
    }

# -------------------
# Simulazioni e report
# -------------------
report_macd = simulate_portfolio(df, "MACD_Buy", "MACD_Sell", "Portfolio_MACD", invest_fraction)
report_rsi = simulate_portfolio(df, "RSI_Buy", "RSI_Sell", "Portfolio_RSI", invest_fraction)
report_bb = simulate_portfolio(df, "BB_Buy", "BB_Sell", "Portfolio_BB", invest_fraction)
report_engulfing = simulate_portfolio(df, "Bullish_Engulfing", "Bearish_Engulfing", "Portfolio_Engulfing", invest_fraction)

print("\n--- REPORT PERFORMANCE ---")
print("\nMACD:")
pprint.pprint(report_macd)
print("\nRSI:")
pprint.pprint(report_rsi)
print("\nBollinger Bands:")
pprint.pprint(report_bb)
print("\nEngulfing:")
pprint.pprint(report_engulfing)

# -------------------
# Marker per grafico
# -------------------
buy_marker_macd = df["Close"].where(df["MACD_Buy"])
sell_marker_macd = df["Close"].where(df["MACD_Sell"])
buy_marker_rsi = df["Close"].where(df["RSI_Buy"])
sell_marker_rsi = df["Close"].where(df["RSI_Sell"])
buy_marker_bb = df["Close"].where(df["BB_Buy"])
sell_marker_bb = df["Close"].where(df["BB_Sell"])
buy_marker_engulfing = df["Close"].where(df["Bullish_Engulfing"])
sell_marker_engulfing = df["Close"].where(df["Bearish_Engulfing"])

apds = [
    mpf.make_addplot(macd, panel=1, color="blue", ylabel='MACD'),
    mpf.make_addplot(macdsignal, panel=1, color="orange"),
    mpf.make_addplot(macdhist, panel=1, type="bar", color="gray"),
    mpf.make_addplot(df["Portfolio_MACD"], panel=2, color="green", ylabel='Portfolio MACD'),
    mpf.make_addplot(df["Portfolio_RSI"], panel=2, color="purple", ylabel='Portfolio RSI'),
    mpf.make_addplot(df["Portfolio_BB"], panel=2, color="brown", ylabel='Portfolio BB'),
    mpf.make_addplot(df["Portfolio_Engulfing"], panel=2, color="pink", ylabel='Portfolio Engulfing'),
    mpf.make_addplot(buy_marker_macd, type='scatter', markersize=100, marker='^', color='green'),
    mpf.make_addplot(sell_marker_macd, type='scatter', markersize=100, marker='v', color='red'),
    mpf.make_addplot(buy_marker_rsi, type='scatter', markersize=80, marker='^', color='blue'),
    mpf.make_addplot(sell_marker_rsi, type='scatter', markersize=80, marker='v', color='orange'),
    mpf.make_addplot(buy_marker_bb, type='scatter', markersize=60, marker='^', color='cyan'),
    mpf.make_addplot(sell_marker_bb, type='scatter', markersize=60, marker='v', color='magenta'),
    mpf.make_addplot(buy_marker_engulfing, type='scatter', markersize=50, marker='^', color='navy'),
    mpf.make_addplot(sell_marker_engulfing, type='scatter', markersize=50, marker='v', color='purple')
]

# -------------------
# Plot finale
# -------------------
mpf.plot(
    df,
    type="candle",
    volume=True,
    addplot=apds,
    style="yahoo",
    title="Strategie MACD, RSI, BB e Engulfing con segnali Buy/Sell",
    show_nontrading=False
)
